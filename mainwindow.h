#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <math.h>
#include <windows.h>
#include <fstream>
#include <iostream>

#include <QMainWindow>
#include <QString>
#include <QDebug>


#include <QLabel>

#include <QTimer>
#include <QDateTime>
#include <QTimerEvent>

#include <QTextStream>
#include <QFile>
#include <QList>
#include <QStringList>
#include <QDir>
#include <QThread>
#include <QMessageBox>

#include <QFileDialog>

#include <QtSerialPort/QSerialPort>
#include <QtSerialPort/QSerialPortInfo>
#include "qextserialport-master/src/qextserialport.h"



extern "C"{
#include "ljackuw.h"
}

namespace Ui {
class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();

    bool initialized=false;     // bool to show if program has finished initialization

    // ====PARAMETERS FOR LABJACK EXTENSION ==== //
    long int ID=0;
    long int trisD=0;
    long int trisIO=0;
    long int stateD=0;
    long int stateIO=0;
    long int outputD=0;

    // ==== PLATFORM PARAMETERS ==== //
    float platformPPS;      //motor pulses per second
    float platformPeriod;   // motor pulse period in seconds
    float platRPM;          //platform rotation per minute
    int asPlatPos=0;    //assumed platform position
    bool platDir= true; //motor directon
    bool platEnable = true; // sets motor enabled/disabled
    bool platBool= false;   // used in print mode to disable platform in first stage

    // ==== VERTICAL PARAMETERS ==== //
    float verticalPPS;  // motor pulses per second
    float verticalPeriod;   //motor pulse period in seconds
    float layerHeight;      //layer height during print mode in mm
    int asVertPos=0;        // assumed vertical position
    bool vertDir= true;     // vertical diraction
    bool vertEnable= true;  // enables/disables the motor

    QBasicTimer sensorTimer;    //used for sampling the sensors

    QString logDir = "C:/Qt/logs/"; //path for saved log files

<<<<<<< HEAD
    QSerialPort serial;
    QString pCom, cCom;
=======
    QSerialPort serial;     //QSerialPort for communication with Arduino
>>>>>>> origin/master

    QList <QSerialPortInfo> serialList; //list of available serial ports
    QStringList serialNameList;     //list of available seriaports as strings

    QMessageBox printMsg;       // messagebox for print massage
    QMessageBox warningMsgVert; //messagebox for warning message

    //configure meassage boxes
    QPushButton *msgReadyButton= printMsg.addButton(tr("Ready"), QMessageBox::AcceptRole);
    QPushButton *msgCancelButton= printMsg.addButton(QMessageBox::Cancel);
    QPushButton *msgOkButton= warningMsgVert.addButton(tr("Ok"), QMessageBox::AcceptRole);

    // public functons
    float rpmtopps(float rpm, int spr);     //transform an rpm value to pulses per second
    float mmrtopps(float mmr, int spr);     //transform mm/revolution value to pulses per second
    void talktoarduino(QString command, QString value); //send command to arduino
    int getDataArduino(QString command);    //send/receive info from arduin
    void delay(int ms);     // pauses program



private slots:
    void closeCom();
    void runSpeed();

    void setPlatformPeriod();
    void setVerticalPeriod();

    void writeDataTxt(QString fileName, QString writeData);

    void readSetSpeed();

    void updateCOM();

    void readPressure();

    // *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+* //
    // *+*+*+*+*+*+*+* SLOTS GENERATED BY QT *+*+*+*+*+*+*+* //
    // *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+* //

    void on_logDirButton_clicked();

    void on_rampDoubleSpinBox_valueChanged(double arg1);

    void on_sendCommandButton_clicked();


    void on_enablePlatBox_toggled(bool checked);

    void on_enableVertBox_toggled(bool checked);

    void on_motorRunButton_clicked();

    void on_motorStopButton_clicked();

    void on_startPrintButton_clicked();

    void on_readyPrintButton_clicked();

    void on_stopPrintButton_clicked();

    void on_initializeButton_clicked();

    void on_rpmPrintBox_valueChanged(double arg1);

    void on_layerPrintBox_valueChanged(double arg1);

    void on_motorRPMBox_valueChanged(double arg1);

    void on_motorMmsBox_valueChanged(double arg1);

    void on_moveUpRadio_clicked(bool checked);

    void on_moveDownRadio_clicked(bool checked);

    void on_cwRadio_clicked(bool checked);

    void on_ccwRadio_clicked(bool checked);

    void on_jogVertButton_pressed();

    void on_jogVertButton_released();

    void on_jogPlatButton_pressed();

    void on_jogPlatButton_released();

signals:
    sensor_timeout();

private:
    Ui::MainWindow *ui;


    QDateTime dateTime;

    QLabel buttonLabel;

protected:
    void timerEvent(QTimerEvent *event);


};

#endif // MAINWINDOW_H
